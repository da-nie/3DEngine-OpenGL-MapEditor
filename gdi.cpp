#include "gdi.h"
 
unsigned char VideoBuffer[500*500*3];//поле для рисования
 
//------------------------------------------------------------------------------
//*************************************************************************************************************************
//Назначение функции:очистка поля чёрным цветом
//Параметры:нет
//Возвращаемое значение:нет
//Устанавливаемые значения:нет
//*************************************************************************************************************************
void ClearVideoBuffer(void)
{
 for(int n=0;n<500*500*3;n++) VideoBuffer[n]=0;
}
//*************************************************************************************************************************
//Назначение функции:установка точки на поле
//Параметры:(x,y)-координаты точки,(r,g,b)-её цвет
//Возвращаемое значение:нет
//Устанавливаемые значения:нет
//*************************************************************************************************************************
void PutPixel(int x,int y,unsigned char r,unsigned char g,unsigned char b)
{
 if (x<0 || y<0 || x>=500 || y>=500) return;//нельзя выходить за пределы поля
 int offset=(x+(499-y)*500)*3;//вычисляем смещение в буфере
 VideoBuffer[offset]=b;//устанавливаем в буфере цвета
 VideoBuffer[offset+1]=g;
 VideoBuffer[offset+2]=r;
}
//*************************************************************************************************************************
//Назначение функции:рисование линии на поле
//Параметры:(x1,y1)-(x2,y2)-координаты линии, (r,g,b)-её цвет
//Возвращаемое значение:нет
//Устанавливаемые значения:нет
//*************************************************************************************************************************
void DrawLine(int x1,int y1,int x2,int y2,unsigned char r,unsigned char g,unsigned char b)
{
 if (x1<0 && x2<0) return;//проверка выхода за пределы поля
 if (x1>=500 && x2>=500) return;
 if (y1<0 && y2<0) return;
 if (y1>=500 && y2>=500) return;
 register int n,a;
 float k,b1;
 if (x2==x1 && y2==y1)
 {
  PutPixel(x1,y1,r,g,b);
  return;
 }
 if (abs(x2-x1)>=abs(y2-y1))
 {
  k=(float)(y2-y1)/(x2-x1);
  b1=y1-k*x1;
  if (x1>x2)
  {
   a=x1;
   x1=x2;
   x2=a;
  }
  for(n=x1;n<=x2;n++) PutPixel(n,(int)(k*n+b1),r,g,b);
 }
 else
 {
  k=(float)(x2-x1)/(y2-y1);
  b1=x1-k*y1;
  if (y1>y2)
  {
   a=y1;
   y1=y2;
   y2=a;
  }
  for(n=y1;n<=y2;n++) PutPixel((int)(k*n+b1),n,r,g,b);
 }
}
//*************************************************************************************************************************
//Назначение функции:рисование окружности на поле
//Параметры:(xc,yc)-координаты центра,radius-радиус,(R,G,B)-цвет, 
//Возвращаемое значение:нет
//Устанавливаемые значения:нет
//*************************************************************************************************************************
void Circle(int xc,int yc,int radius,unsigned char R,unsigned char G,unsigned char B)
{
 if (xc-radius<0 && xc+radius<0) return;//проверка выхода за пределы поля
 if (yc-radius<0 && yc+radius<0) return;
 if (xc-radius>500 && xc+radius>500) return;
 if (yc-radius>500 && yc+radius>500) return;
 register int x=0;
 register int y=radius;
 register int d=1-radius;
 register int delta1=3;
 register int delta2=-2*radius+5;
 for(int z=xc-radius;z<=xc+radius;z++) PutPixel(z,yc,R,G,B);
 while(y>x)
 {
  if (d<0)
  {
   d+=delta1;
   delta1+=2;
   delta2+=2;
   x++;
  }
  else
  {
   d+=delta2;
   delta1+=2;
   delta2+=4;
   x++;
   y--;
  }
  int z;
  for(z=xc-x;z<=xc+x;z++) PutPixel(z,yc+y,R,G,B);
  for(z=xc-x;z<=xc+x;z++) PutPixel(z,yc-y,R,G,B);
  for(z=xc-y;z<=xc+y;z++) PutPixel(z,yc-x,R,G,B);
  for(z=xc-y;z<=xc+y;z++) PutPixel(z,yc+x,R,G,B);
 }
}
 
